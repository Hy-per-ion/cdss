Program 1:
Part A :

%{
#include<stdio.h>
int c=0;
int w=0;
int s=0;
int l=0;
%}
%%
" " { s++; w++;}
[\n] { l++; w++;}
[\t\n] {w++;}
[^\t\n] {c++;}
%%
int yywrap()
{
return 1;
}
int main()
{
yyin=fopen("Info.txt", "r");
yylex();
printf("Characters = %d\nWords = %d\nSpaces = %d\nLines= %d\n",c,w,s,l);
return 0;
}
Output statements :
gedit Info.txt
Write some random texts
lex prog1a.l
cc lex.yy.c -ll
./a.out

PArt B :
%{
#include<stdio.h>
int i=0;
%}
digit [0-9]
letter [a-z A-Z_]
%%
{letter}({letter}|{digit})* {i++;}
{digit}({letter}|{digit})* {i;}
%%
int main()
{
printf("Enter the values:\n");
yylex();
printf("Number of identifiers = %d\n", i);
return 0;
}

output Statements :
lex prog1b.l
cc lex.yy.c -ll
./a.out
a_b
112hn
h34
_h7var
===================================================================
Program 2 : 
Part A :

%{
#include<stdio.h>
int s=0,m=0;
%}
%%
"/*"[a-zA-Z0-9' '\t\n]*"*/" m++;
"//".* s++;
%%
void main(){
yyin=fopen("f1.txt","r");
yyout=fopen("f2.txt","w");
yylex();
fclose(yyin);
fclose(yyout);
printf("no of single line comments=%d\n",s);
printf("no of multi line comments=%d\n",m);
}
int yywrap()
{
return 1;
}

Output Statements :
gedit f1.txt
Write a c program with comments;
lex prog2a.l
cc lex.yy.c -ll
./a.out

Part B :
%{
#include<stdio.h>
int c=0;
%}
%%
[a-zA-Z]*[ ](and|or|but|yet|so)[ ][a-zA-Z]* {c=1;}
.|[\n];
%%
int yywrap()
{
return 1;
}
void main(){
printf("enter the text\n");
yylex();
if(c)
{
printf("The given statement is compound\n");
}
else
{
printf("The given statement is simple\n");
}
}


========================================================================
Program 3: 
Part A :
%{
#include<stdio.h>
int pi=0,ni=0,pf=0,nf=0;
%}
%%
[-][0-9]+ {ni++;}
[+]?[0-9]+ {pi++;}
[-][0-9]*\.[0-9]+ {nf++;}
[+]?[0-9]*\.[0-9]+ {pf++;}
%%
void main(int argc,char *argv[])
{
if(argc!=2)
{
printf("usage :./a.out in.txt \n");
exit(0);
}
yyin=fopen(argv[1],"r");
yylex();
printf("Number of positive integer %d\n",pi);
printf("Number of negative integer %d\n",ni);
printf("Number of positive fraction %d\n",pf);
printf("Number of negative fraction %d\n",nf);
}
int yywrap(){
return 1;
}
Output Statements : 
gedit in.txt
1
2
-64
-8
8.73
3.92
-8.38
lex prog3a.l
cc lex.yy.c -ll
./a.out in.txt

Part B :
%{
#include<stdio.h>
int sf=0,pf=0;
%}
%%
"scanf" {sf++; fprintf(yyout,"readf");}
"printf" {pf++; fprintf(yyout,"writef");}
%%
int main()
{
yyin=fopen("f1.c","r");
yyout=fopen("f2.c","w");
yylex();
printf("no of scanf =%d\n no of printf =%d\n",sf,pf);
return 0;
}

Output : gedit f1.c
#include <stdio.h>
int main()
{
int a,b,c;
printf("Enter the Values of A and B\n");
scanf("%d%d",&a,&b);
c=a+b;
printf("Sum=%d",c);
return 0;
}
gedit f2.c
lex prog3b.l
cc lex.yy.c -ll
./a.out

=======================================================================
Program 4: 

Lex Code : 
%{
#include "y.tab.h"
extern yylval;
%}
%%
[0-9]+ {yylval=atoi(yytext);return num;}
[\+\-\*\/] {return yytext[0];}
[)] {return yytext[0];}
[(] {return yytext[0];}
. {;}
\n {return 0;}
%%

Yacc Code :
%{#include<stdio.h>
#include<stdlib.h>
%}
%token num
%left '+''-'
%left '*''/'
%%
input:exp {printf("%d\n",$$);exit(0);}
exp:exp'+'exp {$$=$1+$3;}
|exp'-'exp {$$=$1-$3;}
|exp'*'exp {$$=$1*$3;}
|exp'/'exp {if($3==0){printf("Division by zero\n");exit(0);}
else
$$=$1/$3;}
|'('exp')' {$$=$2;}
|num {$$=$1;};
%%
int yyerror()
{
printf("error");
exit(0);
}
int yywrap(){
return 1;
}
int main()
{
printf("Enter the expression:\n");
yyparse();
}
Output Statements :
lex prog4.l
yacc -d prog4.y
gcc lex.yy.c y.tab.c


=======================================================================
Program 5 :
Lex Part :
%{
#include "y.tab.h"
%}
%%
[a-zA-Z] return L;
[0-9] return D;
%%

int yywrap()
{
return 1;
}

Yacc Part :

%{
#include <stdio.h>
#include <stdlib.h>
int yyerror();
%}
%token L D

%%
var:L E {printf("Valid Variable\n");return 0;}
E:E L;
|E D;
|;
%%

int main()
{
printf("Type the variable\n");
yyparse();
return 0;
}
int yyerror()
{
printf("Invalid varialble\n");
exit(0);
}
Output Commands :
lex prog5.l
yacc -d prog5.y
gcc lex.yy.c y.tab.c
./a.out
===================================================================================
Program 6 :
Lex Code :
%{
#include "y.tab.h"
%}
%%
a return A;
b return B;
. return yytext[0];
\n return yytext[0];
%%
 
Yacc Code :
%{
#include <stdio.h>
#include <stdlib.h>
%}
%token A B
%%
Str:S '\n' {return 0;}
S:A S B;
| ;
%%
int main()
{
printf("Type the String \n");
if(!yyparse())
printf("Valid String\n");
return 0;
}
int yywrap() {
  return 1;
}
int yyerror()
{
printf("Invalid String");
exit(0);
}

Output Statements :
lex prog6.l
yacc  -d prog6.y
gcc lex.yy.c y.tab.c
./a.out
==================================================================
Program 7 :
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
void main()
{
char opcode[10], operand[10], label[10], code[10], mnemonic[3];
int locctr, start, length;
FILE *fp1,*fp2,*fp3,*fp4;
fp1=fopen("Input.txt","r");
fp2=fopen("Optab.txt","r");
fp3=fopen("Symtabl.txt","w");
fp4=fopen("Out.txt","w");
fscanf(fp1,"%s\t%s\t%s", label,opcode,operand);
if(strcmp(opcode,"START")==0)
{
start=atoi(operand);
locctr=start;
fprintf(fp4,"\t%s\t%s\t%s\n",label,opcode,operand);
fscanf(fp1,"%s\t%s\t%s",label,opcode,operand);
}
else
locctr=0;
while(strcmp(opcode,"END")!=0)
{
fprintf(fp4,"%d\t",locctr);
if(strcmp(label,"**")!=0)
fprintf(fp3,"%s\t%d\n",label,locctr);
fscanf(fp2,"%s\t%s",code,mnemonic);
while(strcmp(code,"END")!=0)
{
if(strcmp(opcode,code)==0)
{
locctr+=3;
break;
}
fscanf(fp2,"%s\t%s",code,mnemonic);
}
if(strcmp(opcode,"WORD")==0)
locctr+=3;
else if(strcmp(opcode,"RESW")==0)
locctr+=(3*(atoi(operand)));
else if(strcmp(opcode,"RESB")==0)
locctr+=atoi(operand);
else if(strcmp(opcode,"BYTE")==0)
++locctr;
fprintf(fp4,"%s\t%s\t%s\t\n",label,opcode,operand);
fscanf(fp1,"%s\t%s\t%s",label,opcode,operand);
}
fprintf(fp4,"%d\t%s\t%s\t%s\n",locctr,label,opcode,operand);
length=locctr-start;
printf("The length of the code:%d\n",length);
fclose(fp1);
fclose(fp2);
fclose(fp3);
fclose(fp4);
}

Input.txt :
**    START   2000
**    LDA     FIVE
**    STA     ALPHA
**    LDCH    CHARZ
**    STCH    C1
ALPHA RESW 2
FIVE  WORD 5
CHARZ BYTE C'Z'
C1    RESB 1
**    END **

Optab.txt :
START *
LDA 03
STA 0f
LDCH 53
STCH 57
END *







